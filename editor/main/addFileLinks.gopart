func addFileLinks(review string, files []string) string {
	linksSection := "\n\nChanged Files:\n"

	// Get the git remote URL
	gitConfig, err := exec.Command("git", "config", "--get", "remote.origin.url").Output()
	if err != nil {
		fmt.Println("Error getting git remote URL:", err)
		return review
	}

	// Get the current branch name
	branchBytes, err := exec.Command("git", "rev-parse", "--abbrev-ref", "HEAD").Output()
	if err != nil {
		fmt.Println("Error getting current branch:", err)
		return review
	}
	currentBranch := strings.TrimSpace(string(branchBytes))

	gitURL := strings.TrimSpace(string(gitConfig))
	gitURL = strings.TrimSuffix(gitURL, ".git")

	var baseURL string
	if strings.HasPrefix(gitURL, "git@") {
		// SSH-style URL
		parts := strings.SplitN(gitURL, ":", 2)
		if len(parts) != 2 {
			fmt.Println("Invalid SSH-style Git URL")
			return review
		}
		domain := strings.TrimPrefix(parts[0], "git@")
		path := parts[1]
		baseURL = fmt.Sprintf("https://%s/%s", domain, path)
	} else if strings.HasPrefix(gitURL, "https://") {
		// HTTPS-style URL
		baseURL = gitURL
	} else {
		fmt.Println("Unsupported Git URL format")
		return review
	}

	for _, file := range files {
		fileURL := fmt.Sprintf("%s/blob/%s/%s", baseURL, currentBranch, file)
		linksSection += fmt.Sprintf("- [%s](%s)\n", file, fileURL)
	}

	if len(files) > 0 {
		return review + linksSection
	}
	return review
}

